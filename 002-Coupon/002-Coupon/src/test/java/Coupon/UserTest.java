/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package Coupon;

import org.junit.Test;
import static org.junit.Assert.*;

public class UserTest {
	// Dummy Object
    @Test
    public void testAddCoupon() throws Exception {
        User user = new User("area88");
        assertEquals("쿠폰 수령 이전", 0, user.getTotalCouponCount());
        
        ICoupon coupon = new DummyCoupon(); // Dummy Object
        
        user.addCoupon(coupon);
        assertEquals("쿠폰 수령 이후", 1, user.getTotalCouponCount());
    }
    
    // Test Stub
    @Test
    public void testGetLastOccupiedCoupon() throws Exception {
    	User user = new User("area88");
    	ICoupon eventCoupon = new StubCoupon(); // Test Stub
    	user.addCoupon(eventCoupon);
    	ICoupon lastCoupon = user.getLastOccupiedCoupon();
    	
    	assertEquals("쿠폰 할인율", 7, lastCoupon.getDiscountPercent());
    	assertEquals("쿠폰 이름", "한가위 쿠폰", lastCoupon.getName());
    }
    
    // Fake 객체 1
    @Test
    public void testGetOrderPrice_discountableItem() throws Exception {
    	PriceCalculator calculator = new PriceCalculator();
    	// new item(이름, 카테고리, 가격)
    	Item item = new Item("LightSavor", "부엌칼", 100000);
    	ICoupon coupon = new FakeCoupon();
    	
    	assertEquals("쿠폰으로 할인된 가격", 93000, calculator.getOrderPrice(item, coupon));
    }
    
    // Fake 객체 2
    @Test
    public void testGetOrderPrice_undiscountableItem() throws Exception {
    	PriceCalculator calculator = new PriceCalculator();
    	// new item(이름, 카테고리, 가격)
    	Item item = new Item("R2D2", "알람시계", 20000);
    	ICoupon coupon = new FakeCoupon();
    	
    	assertEquals("쿠폰 할인 안되는 아이템", 20000, calculator.getOrderPrice(item, coupon));
    }
    
    // Fake 객체+Spy
    @Test
    public void testGetOrderPrice_discountableItemSpy() throws Exception {
    	PriceCalculator calculator = new PriceCalculator();
    	// new item(이름, 카테고리, 가격)
    	Item item = new Item("LightSavor", "부엌칼", 100000);
    	ICoupon coupon = new FakeCouponSpy();
    	
    	assertEquals("쿠폰으로 할인된 가격", 93000, calculator.getOrderPrice(item, coupon));
    	
    	int methodCallCount = ((FakeCouponSpy) coupon).getAppliableCallCount();
    	assertEquals("coupon appliable 호출 횟수", 1, methodCallCount);
    }
}
